# Clean Architecture 達人に学ぶソフトウェアの構造と設計
# 14章 コンポーネントの結合
## 非循環依存関係の法則(ADP)
コンポーネントの依存グラフに循環依存があってはならない

- コンポーネントの依存時構造をキチンの管理する必要がある
- 循環依存がある場合は、依存関係にあるコンポーネントが一つの巨大なコンポーネントになり、テストや変更などが難しくなりバグの温床となってしまう
- コンポーネントの構造はトップダウンで設計するのは不可能、システム設計の歳だけでなくその後もどんどん変わっていってしまう


### 循環依存の解消
- 依存関係逆転の原則(DIP)を適用する
- 単純にリリース可能なコンポーネントに分割すればいい

## 安定依存の原則(SDP)
安定度の高い方向に依存すること

- 変更しやすい設計のコンポーネントは他のコンポーネントから依存されてはいけない、変更が難しくなってしまう
- 安定している(stable)とは「簡単には動かせないこと(not easily moved)」
- 上記をソフトウェアにあてはめると、多数のコンポーネントから依存されているコンポーネントは安定していると言える(変更が難しいため *いろいろな要素は無視している)
- すべてのコンポーネントに高い安定度を求める必要は無い。すべてのコンポーネントが最大限安定した状態は、システムに手を加えることができない
- 抽象コンポーネント(インターフェイス)は安定度が高い

### 安定度の指標
- ファン・イン：依存入力数。コンポーネント内のクラスに依存している外部コンポーネントの数。
- ファン・アウト：依存出力数。コンポーネント内にある外部のコンポーネントに依存しているクラスの数
- I(Instability)：不安定さ。I＝ファン・アウ÷(ファン・イン＋ファン・アウト)、I=0が最も安定していて、I=1が最も不安定なコンポーネントを表す

